from utils import *from tqdm import tqdmfrom time import sleepclass KnSharing:    def __init__(self, k, n, recons):        self.k = k        self.n = n        self.recons = recons    def generate_random_var(self, n):        rand = np.array([])        count = 0        while count < self.recons:            random = randi(n)            if random not in rand:                rand = np.append(rand, random)                count = count + 1        return rand    def create_shares(self, image):        N, D = image.size        stego_image_bit_stream = to_24_bit_stream(image)        row_size = stego_image_bit_stream.shape[0]        column_size = stego_image_bit_stream.shape[1]        temp = np.zeros((self.n, row_size, column_size))        shares = np.zeros((self.n, N, D, 3))        print("K-N Secret Sharing progress is started : ")        for row in tqdm(range(row_size)):            for column in range(column_size):                if stego_image_bit_stream[row, column] == 1:                    rand = self.generate_random_var(self.n)                    for share in range(self.n - self.k + 1):                        temp[int(rand[share]), row, column] = 1        for idx in range(self.n):            rgb = temp[idx, :, :]            shares[idx, :, :, :] = bit_stream_of_24_to_image(rgb, N, D)            bit_stream_of_24_to_image(rgb, N, D).show()        return shares